using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace DDY_GJM_23
{
    // A tile the player and enemies travel over.
    public class WorldTile : MonoBehaviour
    {
        // The type of the tile.
        public enum tileType { none, grass, metal, pavement, brick, bridge, pit, water, poison };

        // The type of the world tile.
        public tileType type;

        // The collider for the floor tile.
        public new BoxCollider2D collider;

        // The physics material for this floor tile.
        public PhysicsMaterial2D physicsMaterial;

        // Determines if the tile is a liquid or a solid.
        public bool isLiquid = false;

        // Start is called before the first frame update
        protected virtual void Start()
        {
            // Tries to get the collider if it's not set.
            if(collider == null)
                collider = GetComponent<BoxCollider2D>();
        }

        // TriggerEnter2D - Add tile to list.
        private void OnTriggerEnter2D(Collider2D collision)
        {
            // Checks for a combat entity.
            Combatant combatEntity = null;

            // Checks if the collision object is a combat entity.
            if(collision.TryGetComponent(out combatEntity))
            {
                // Sets this as the current tile.
                if(!combatEntity.currentTiles.Contains(this))
                    combatEntity.currentTiles.Add(this);
            }
        }

        // FIXME: why did I do this?
        // // OnTriggerStay2D
        // private void OnTriggerStay2D(Collider2D collision)
        // {
        //     // Checks for a combat entity.
        //     Combatant combatEntity = null;
        // 
        //     // Checks if the collision object is a combat entity.
        //     if (collision.TryGetComponent(out combatEntity))
        //     {
        //         // This is meant to address problems where the entity is standing on multiple tiles at once.
        //         // The tile that the entity entered last is the physics tile.
        // 
        //         // Sets this as the current tile.
        //         if(!combatEntity.currentTiles.Contains(this))
        //             combatEntity.currentTiles.Add(this);
        //     }
        // }

        // TriggerExit2D
        private void OnTriggerExit2D(Collider2D collision)
        {
            // Checks for a combat entity.
            Combatant combatEntity = null;

            // Checks if the collision object is a combat entity.
            if (collision.TryGetComponent(out combatEntity))
            {
                // Clears out the tile.
                if(combatEntity.currentTiles.Contains(this))
                    combatEntity.currentTiles.Remove(this);
            }
        }

        // Returns the amount of friction generated by this tile. The higher the fraction, the less that the entity moves.
        public float GetFriction()
        {
            // The friction for the movement.
            float friction = 0.0F;

            // Checks if the physics material exists or not.
            if(physicsMaterial != null)
            {
                friction = physicsMaterial.friction;
            }
            else
            {
                // 0.4F is the Unity default.
                friction = 0.4F;
            }

            // Return the friction.
            return friction;
        }

        // Update is called once per frame
        protected virtual void Update()
        {
            // ...
        }
    }
}